---
- name: Resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      ignore_errors: true
      paths:
        - '{{ role_path }}/vars'

- name: Install Neovim
  block:
  - name: Download from GitHub
    get_url:
      dest: /usr/local/bin/nvim
      force: yes
      url: "{{ neovim_url }}"
      checksum: "{{ neovim_checksum }}"
      mode: u=rx,g=rx,o=rx
    become: true

  when: "neovim_enable_install_neovim"

- name: Plugins dependencies
  block:
  - name: Package manager dependencies
    include_tasks: '{{ item }}'
    with_first_found:
      - files:
          - 'tasks-{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
          - 'tasks-{{ ansible_distribution }}.yml'
          - 'tasks-{{ ansible_os_family }}.yml'
        ignore_errors: true
        paths:
          - '{{ role_path }}/tasks'

  - name: Python dependencies
    pip:
      state: present
      executable: "{{ neovim_pip_executable | default(omit) }}"
      name: "{{ neovim_python_dependencies }}"

  - name: NodeJS dependencies
    npm:
      name: ansible-language-server
      global: yes
      state: present
    become: true

  when: "neovim_enable_install_dependencies"

- name: Install neovim dotfiles
  block:
    - name: Clone dotfiles
      git:
        dest: "{{ ansible_user_dir > 0 | ternary(ansible_user_dir , '~/') }}/dotfiles"
        force: no
        recursive: yes
        repo: "{{ neovim_dotfiles['repo'] }}"
        update: yes
        version: "{{ 'version' in neovim_dotfiles | ternary(neovim_dotfiles['version'], omit) }}"
      notify: Update dotfiles owners

    - name: Create config dir
      file:
        state: directory
        path: "{{ (ansible_user_dir | length > 0) | ternary(ansible_user_dir , '~/') }}/.config"
        user: "{{ ansible_user_uid | default(omit) }}"
        group: "{{ ansible_user_gid | default(omit) }}"
        recursive: yes

    - name: symlink neovim config
      file:
        state: link
        src: "{{ ansible_user_dir > 0 | ternary(ansible_user_dir , '~/') }}/dotfiles/{{ neovim_dotfiles['path'] | default('') }}"
        dest: "{{ (ansible_user_dir | length > 0) | ternary(ansible_user_dir , '~/') }}/.config"
        user: "{{ ansible_user_uid | default(omit) }}"
        group: "{{ ansible_user_gid | default(omit) }}"

  when: "neovim_enable_install_dotfiles"

- name: Config python support
  include_tasks: config-python.yml
  with_items:
    - python_executable: "{{ neovim_python_executable }}"
      python_support: "{{ neovim_python_support }}"
      py: python

    - python_executable: "{{ neovim_python3_executable }}"
      python_support: "{{ neovim_python3_support }}"
      py: python3

  when: "neovim_enable_config"
